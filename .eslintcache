[{"/Users/BenKimball/workspace/fitnessforward/src/index.js":"1","/Users/BenKimball/workspace/fitnessforward/src/components/FitnessForward.js":"2","/Users/BenKimball/workspace/fitnessforward/src/components/ApplicationViews.js":"3","/Users/BenKimball/workspace/fitnessforward/src/components/nav/NavBar.js":"4","/Users/BenKimball/workspace/fitnessforward/src/components/auth/Login.js":"5","/Users/BenKimball/workspace/fitnessforward/src/components/auth/Register.js":"6","/Users/BenKimball/workspace/fitnessforward/src/components/Home.js":"7","/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutList.js":"8","/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutForm.js":"9","/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseForm.js":"10","/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutDetail.js":"11","/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseDetail.js":"12","/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseProvider.js":"13","/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutProvider.js":"14","/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseList.js":"15","/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutCard.js":"16","/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseCard.js":"17"},{"size":376,"mtime":1611947979613,"results":"18","hashOfConfig":"19"},{"size":760,"mtime":1612382949207,"results":"20","hashOfConfig":"19"},{"size":2142,"mtime":1612466540396,"results":"21","hashOfConfig":"19"},{"size":760,"mtime":1612455103697,"results":"22","hashOfConfig":"19"},{"size":2175,"mtime":1612382915811,"results":"23","hashOfConfig":"19"},{"size":3130,"mtime":1612382920577,"results":"24","hashOfConfig":"19"},{"size":4006,"mtime":1612218493132,"results":"25","hashOfConfig":"19"},{"size":1067,"mtime":1612470651065,"results":"26","hashOfConfig":"19"},{"size":8881,"mtime":1612470425452,"results":"27","hashOfConfig":"19"},{"size":7895,"mtime":1612459225250,"results":"28","hashOfConfig":"19"},{"size":1946,"mtime":1612470569061,"results":"29","hashOfConfig":"19"},{"size":1466,"mtime":1612469402217,"results":"30","hashOfConfig":"19"},{"size":3156,"mtime":1612469482534,"results":"31","hashOfConfig":"19"},{"size":1909,"mtime":1612469822395,"results":"32","hashOfConfig":"19"},{"size":2465,"mtime":1612466021303,"results":"33","hashOfConfig":"19"},{"size":904,"mtime":1612470470030,"results":"34","hashOfConfig":"19"},{"size":804,"mtime":1612471111519,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"pbx1j6",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/BenKimball/workspace/fitnessforward/src/index.js",[],["74","75"],"/Users/BenKimball/workspace/fitnessforward/src/components/FitnessForward.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/ApplicationViews.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/nav/NavBar.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/auth/Login.js",["76"],"import React, { useRef } from \"react\"\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\"\nimport \"./Login.css\"\n\n\nexport const Login = props => {\n    const email = useRef()\n    const password = useRef()\n    const existDialog = useRef()\n    const history = useHistory()\n\n    const existingUserCheck = () => {\n        return fetch(`http://localhost:8088/user?email=${email.current.value}`)\n            .then(res => res.json())\n            .then(user => user.length ? user[0] : false)\n    }\n\n    const handleLogin = (e) => {\n        e.preventDefault()\n\n        existingUserCheck()\n            .then(exists => {\n                if (exists) {\n                    localStorage.setItem(\"fitnessforward_user\", exists.id)\n                    history.push(\"/workouts\")\n                } else {\n                    existDialog.current.showModal()\n                }\n            })\n    }\n\n    return (\n        <main className=\"container--login\">\n            <dialog className=\"dialog dialog--auth\" ref={existDialog}>\n                <div>User does not exist</div>\n                <button className=\"button--close\" onClick={e => existDialog.current.close()}>Close</button>\n            </dialog>\n\n            <section>\n                <form className=\"form--login\" onSubmit={handleLogin}>\n                    <h1>Fitness Forward</h1>\n                    <h2>Please sign in</h2>\n                    <fieldset>\n                        <label htmlFor=\"inputEmail\"> Email address </label>\n                        <input ref={email} type=\"email\"\n                            id=\"email\"\n                            className=\"form-control\"\n                            placeholder=\"Email address\"\n                            required autoFocus />\n                    </fieldset>\n                    <fieldset>\n                        <button type=\"submit\">\n                            Sign in\n                        </button>\n                    </fieldset>\n                </form>\n            </section>\n            <section className=\"link--register\">\n                <Link to=\"/register\">Not a member yet?</Link>\n            </section>\n        </main>\n    )\n}\n","/Users/BenKimball/workspace/fitnessforward/src/components/auth/Register.js",["77"],"import React, { useRef } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport \"./Login.css\"\n\nexport const Register = (props) => {\n    const firstName = useRef()\n    const lastName = useRef()\n    const email = useRef()\n    const verifyPassword = useRef()\n    const conflictDialog = useRef()\n    const history = useHistory()\n\n    const existingUserCheck = () => {\n        return fetch(`http://localhost:8088/users?email=${email.current.value}`)\n            .then(res => res.json())\n            .then(user => !!user.length)\n    }\n\n    const handleRegister = (e) => {\n        e.preventDefault()\n\n\n        existingUserCheck()\n            .then((userExists) => {\n                if (!userExists) {\n                    fetch(\"http://localhost:8088/users\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            email: email.current.value,\n                            name: `${firstName.current.value} ${lastName.current.value}`\n                        })\n                    })\n                        .then(res => res.json())\n                        .then(createdUser => {\n                            if (createdUser.hasOwnProperty(\"id\")) {\n                                localStorage.setItem(\"fitnessforward_user\", createdUser.id)\n                                history.push(\"/\")\n                            }\n                        })\n                }\n                else {\n                    conflictDialog.current.showModal()\n                }\n            })\n        \n    }\n\n    return (\n        <main style={{ textAlign: \"center\" }}>\n\n            <dialog className=\"dialog dialog--password\" ref={conflictDialog}>\n                <div>Account with that email address already exists</div>\n                <button className=\"button--close\" onClick={e => conflictDialog.current.close()}>Close</button>\n            </dialog>\n\n            <form className=\"form--login\" onSubmit={handleRegister}>\n                <h1 className=\"h3 mb-3 font-weight-normal\">Please Register for Fitness Forward</h1>\n                <fieldset>\n                    <label htmlFor=\"firstName\"> First Name </label>\n                    <input ref={firstName} type=\"text\" name=\"firstName\" className=\"form-control\" placeholder=\"First name\" required autoFocus />\n                </fieldset>\n                <fieldset>\n                    <label htmlFor=\"lastName\"> Last Name </label>\n                    <input ref={lastName} type=\"text\" name=\"lastName\" className=\"form-control\" placeholder=\"Last name\" required />\n                </fieldset>\n                <fieldset>\n                    <label htmlFor=\"inputEmail\"> Email address </label>\n                    <input ref={email} type=\"email\" name=\"email\" className=\"form-control\" placeholder=\"Email address\" required />\n                </fieldset>\n                <fieldset>\n                    <button type=\"submit\"> Sign in </button>\n                </fieldset>\n            </form>\n        </main>\n    )\n}","/Users/BenKimball/workspace/fitnessforward/src/components/Home.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutList.js",["78"],"/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutForm.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseForm.js",["79","80"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { WorkoutContext } from \"../workout/WorkoutProvider\"\nimport { ExerciseContext } from \"./ExerciseProvider\"\nimport \"./Exercise.css\"\nimport { useHistory, useParams } from 'react-router-dom';\n\nexport const ExerciseForm = () => {\n    const { addExercise } = useContext(ExerciseContext)\n    const { workouts, getWorkouts, updateExercise } = useContext(WorkoutContext)\n\n    const [exercise, setExercise] = useState({\n      name: \"\",\n      workoutId: 0,\n      logEntry: \"\",\n      weightUsed: \"\",\n      restInterval: \"\"\n    });\n\n    const history = useHistory();\n\n    useEffect(() => {\n      getWorkouts()\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n\n\n    //when a field changes, update state. The return will re-render and display based on the values in state\n    //Controlled component\n    const handleControlledInputChange = (event) => {\n      /* When changing a state object or array,\n      always create a copy, make changes, and then set state.*/\n      const newExercise = { ...exercise }\n      /* Animal is an object with properties.\n      Set the property to the new value\n      using object bracket notation. */\n      newExercise[event.target.id] = event.target.value\n      // update state\n      setExercise(newExercise)\n    }\n\n    const handleClickSaveExercise = (event) => {\n      event.preventDefault() //Prevents the browser from submitting the form\n\n      const workoutId = parseInt(workouts.exerciseId)\n\n      if (workoutId === 0) {\n        window.alert(\"Please select a workout\")\n      } else {\n        exercise.workoutId = workoutId\n        addExercise(exercise)\n        .then(() => history.push(\"/exercises\"))\n      }\n    }\n\n    return (\n      <form className=\"exerciseForm\">\n          <h2 className=\"exerciseForm__title\">New Exercise</h2>\n          <fieldset>\n              <div className=\"form-group\">\n                  <label htmlFor=\"name\">Exercise name: </label>\n                  <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Exercise name\" value={exercise.name}/>\n              </div>\n          </fieldset>\n          <fieldset>\n              <div className=\"form-group\">\n                  <label htmlFor=\"workout\">Assign to workout: </label>\n                  <select defaultValue={exercise.workoutId} name=\"workoutId\" id=\"workoutId\" className=\"form-control\" onChange={handleControlledInputChange}>\n                      <option value=\"0\">Select a workout</option>\n                      {workouts.map(w => (\n                          <option key={w.id} value={w.id}>\n                              {w.name}\n                          </option>\n                      ))}\n                  </select>\n              </div>\n          </fieldset>\n          <button className=\"btn btn-primary\"\n            onClick={handleClickSaveExercise}>\n            Save Exercise\n          </button>\n      </form>\n    )\n}\n/* import React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from 'react-router-dom';\nimport { ExerciseContext } from \"./ExerciseProvider\";\nimport \"./Exercise.css\";\n\n\nexport const ExerciseForm = () => {\n    const { addExercise, getExerciseById, updateExercise, workouts} = useContext(ExerciseContext);\n    // For edit, hold on to state of location in this view\n    // You need an initial state for it to allow you to edit it\n    const [exercise, setExercise] = useState({\n      name: \"\",\n      logEntry: \"\",\n      exerciseId: 0,\n      weightUsed: \"\",\n      restInterval: \"\"\n    });\n\n    //wait for data before button is active\n    const [isLoading, setIsLoading] = useState(true);\n\n    const {exerciseId} = useParams();\n    \n    const history = useHistory();\n\n    //when field changes, update state. This causes a re-render and updates the view.\n    //Controlled component\n    const handleControlledInputChange = (event) => {\n      //When changing a state object or array,\n      //always create a copy make changes, and then set state.\n      const newExercise = { ...exercise };\n\n      //location is an object with properties.\n      //set the property to the new value\n      newExercise[event.target.name] = event.target.value;\n      \n      //update state\n      setExercise(newExercise);\n    };\n\n    const handleSaveExercise = () => {\n      if (parseInt(exercise.exerciseId) === 0) { \n          window.alert(\"Please fill out the name and address fields\")\n      }else {\n        //disable the button - no extra clicks\n        setIsLoading(true);\n        if (exerciseId){\n          //PUT - update\n          updateExercise({\n              id: exercise.id,\n              name: exercise.name,\n              exerciseId: parseInt(exercise.exerciseId),\n              weightUsed: \"\",\n              restInterval: \"\"\n          })\n          .then(() => history.push(`/exercises/detail/${exercise.id}`))\n        }else {\n          //POST - add\n          addExercise({\n              name: exercise.name,\n              exerciseId: parseInt(exercise.exerciseId),\n              weightUsed: \"\",\n              restInterval: \"\"\n           \n          })\n          .then(() => history.push(\"/exercises\"))\n        };\n      };\n    };\n\n    // Get exercises. If exerciseId is in the URL, getexerciseById\n    useEffect(() => {\n        if (exerciseId){\n          getExerciseById(exerciseId)\n          .then(exercise => {\n              setExercise(exercise);\n              setIsLoading(false);\n          })\n        } else {\n          setIsLoading(false);\n        }\n    }, // eslint-disable-next-line\n    []);\n\n    //since state controlls this component, we no longer need\n    //useRef(null) or ref\n\n    return (\n      <form className=\"exerciseForm\">\n        <h2 className=\"exerciseForm__title\">{exerciseId ? <>Edit Exercise</> : <>New Exercise</>}</h2>\n        <fieldset>\n          <div className=\"form-group\">\n            <label htmlFor=\"exerciseName\">Exercise name: </label>\n            <input type=\"text\" id=\"exerciseName\" name=\"name\" required autoFocus className=\"form-control\"\n            placeholder=\"exercise name\"\n            onChange={handleControlledInputChange}\n            defaultValue={exercise.name}/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"weightUsed\">Weight used: </label>\n            <input type=\"text\" id=\"weightUsed\" name=\"weightUsed\" required autoFocus className=\"form-control\"\n            placeholder=\"Ex: 135 lbs\"\n            onChange={handleControlledInputChange}\n            defaultValue={exercise.weightUsed}/>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"restInterval\">Rest Intervals: </label>\n            <input type=\"text\" id=\"restInterval\" name=\"restInterval\" required autoFocus className=\"form-control\"\n            placeholder=\"Ex: 60 seconds\"\n            onChange={handleControlledInputChange}\n            defaultValue={exercise.restInterval}/>\n          </div>\n        </fieldset>\n\n{/*         <fieldset>\n          <div className=\"form-group\">\n            <label htmlFor=\"WorkoutUsed\">Workout used: </label>\n            <select value={workouts.exerciseId} name=\"workoutUsed\" id=\"workoutUsed\" className=\"form-control\" onChange={handleControlledInputChange}>\n              <option value=\"0\">Select a Workout</option>\n              {workouts.map(w => (\n                <option key={w.id} value={w.id}>\n                    {w.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </fieldset> *\n        <button className=\"btn btn-primary\"\n          disabled={isLoading}\n          onClick={event => {\n            event.preventDefault(); // Prevent browser from submitting the form and refreshing the page\n            handleSaveExercise();\n          }}>\n        {exerciseId ? <>Save Exercise</> : <>Add Exercise</>}</button>\n      </form>\n    );\n}; */","/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutDetail.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseDetail.js",["81"],"/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseProvider.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutProvider.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseList.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/workout/WorkoutCard.js",[],"/Users/BenKimball/workspace/fitnessforward/src/components/exercise/ExerciseCard.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":9,"column":11,"nodeType":"88","messageId":"89","endLine":9,"endColumn":19},{"ruleId":"86","severity":1,"message":"90","line":9,"column":11,"nodeType":"88","messageId":"89","endLine":9,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":17,"column":6,"nodeType":"93","endLine":17,"endColumn":8,"suggestions":"94"},{"ruleId":"86","severity":1,"message":"95","line":5,"column":22,"nodeType":"88","messageId":"89","endLine":5,"endColumn":31},{"ruleId":"86","severity":1,"message":"96","line":9,"column":36,"nodeType":"88","messageId":"89","endLine":9,"endColumn":50},{"ruleId":"91","severity":1,"message":"97","line":27,"column":5,"nodeType":"93","endLine":27,"endColumn":7,"suggestions":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'password' is assigned a value but never used.","Identifier","unusedVar","'verifyPassword' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getWorkouts'. Either include it or remove the dependency array.","ArrayExpression",["101"],"'useParams' is defined but never used.","'updateExercise' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'exerciseId' and 'getExerciseById'. Either include them or remove the dependency array.",["102"],"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [getWorkouts]",{"range":"107","text":"108"},"Update the dependencies array to be: [exerciseId, getExerciseById]",{"range":"109","text":"110"},[579,581],"[getWorkouts]",[884,886],"[exerciseId, getExerciseById]"]